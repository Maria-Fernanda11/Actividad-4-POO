# -*- coding: utf-8 -*-
"""Actividad4-Punto2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rPEbJQ82_zLutRY8yrdaZRgcCIi65uLR
"""

import math
import tkinter as tk
from tkinter import messagebox

## Clase: FiguraGeometrica
class FiguraGeometrica:

    def __init__(self):
        self._volumen = 0.0
        self._superficie = 0.0

    @property
    def volumen(self):

        return self._volumen

    @volumen.setter
    def volumen(self, volumen):

        self._volumen = volumen

    @property
    def superficie(self):

        return self._superficie

    @superficie.setter
    def superficie(self, superficie):

        self._superficie = superficie

## Clase: Cilindro
class Cilindro(FiguraGeometrica):

    def __init__(self, radio, altura):

        super().__init__()
        self.radio = radio
        self.altura = altura
        # Calcula el volumen y establece su atributo
        self.volumen = self.calcular_volumen()
        # Calcula la superficie y establece su atributo
        self.superficie = self.calcular_superficie()

    def calcular_volumen(self):

        volumen = math.pi * self.altura * (self.radio ** 2)
        return volumen

    def calcular_superficie(self):

        area_lado_a = 2.0 * math.pi * self.radio * self.altura
        area_lado_b = 2.0 * math.pi * (self.radio ** 2)
        return area_lado_a + area_lado_b

## Clase: Esfera
class Esfera(FiguraGeometrica):

    def __init__(self, radio):

        super().__init__()
        self.radio = radio
        # Calcula el volumen y establece su atributo
        self.volumen = self.calcular_volumen()
        # Calcula la superficie y establece su atributo
        self.superficie = self.calcular_superficie()

    def calcular_volumen(self):

        volumen = (4/3) * math.pi * (self.radio ** 3)
        return volumen

    def calcular_superficie(self):

        superficie = 4.0 * math.pi * (self.radio ** 2)
        return superficie

## Clase: Piramide
class Piramide(FiguraGeometrica):

    def __init__(self, base, altura, apotema):

        super().__init__()
        self.base = base
        self.altura = altura
        self.apotema = apotema
        # Calcula el volumen y establece su atributo
        self.volumen = self.calcular_volumen()
        # Calcula la superficie y establece su atributo
        self.superficie = self.calcular_superficie()

    def calcular_volumen(self):

        volumen = ((self.base ** 2) * self.altura) / 3.0
        return volumen

    def calcular_superficie(self):

        area_base = self.base ** 2
        area_lado = 2.0 * self.base * self.apotema
        return area_base + area_lado

## Clase: VentanaCilindro
class VentanaCilindro(tk.Toplevel):

    def __init__(self, master=None):

        super().__init__(master)
        self.title("Cilindro")
        self.geometry("280x210")
        self.grab_set()
        self.transient(master)
        self.resizable(False, False)
        self.inicio()

    def inicio(self):

        self.contenedor = tk.Frame(self)
        self.contenedor.pack(fill="both", expand=True)

        self.radio_label = tk.Label(self.contenedor, text="Radio (cms):")
        self.radio_label.place(x=20, y=20, width=135, height=23)
        self.campo_radio = tk.Entry(self.contenedor)
        self.campo_radio.place(x=100, y=20, width=135, height=23)

        self.altura_label = tk.Label(self.contenedor, text="Altura (cms):")
        self.altura_label.place(x=20, y=50, width=135, height=23)
        self.campo_altura = tk.Entry(self.contenedor)
        self.campo_altura.place(x=100, y=50, width=135, height=23)

        self.calcular_button = tk.Button(self.contenedor, text="Calcular", command=self.calcular_propiedades)
        self.calcular_button.place(x=100, y=80, width=135, height=23)

        self.volumen_label = tk.Label(self.contenedor, text="Volumen (cm3):")
        self.volumen_label.place(x=20, y=110, width=135, height=23)

        self.superficie_label = tk.Label(self.contenedor, text="Superficie (cm2):")
        self.superficie_label.place(x=20, y=140, width=135, height=23)

    def calcular_propiedades(self):

        error = False
        try:
            radio = float(self.campo_radio.get())
            altura = float(self.campo_altura.get())

            cilindro = Cilindro(radio, altura)

            self.volumen_label.config(text=f"Volumen (cm3): {cilindro.calcular_volumen():.2f}")
            self.superficie_label.config(text=f"Superficie (cm2): {cilindro.calcular_superficie():.2f}")

        except ValueError:
            error = True

        finally:
            if error:
                messagebox.showerror("Error", "Campo nulo o error en formato de número")

## Clase: VentanaEsfera
class VentanaEsfera(tk.Toplevel):

    def __init__(self, master=None):

        super().__init__(master)
        self.title("Esfera")
        self.geometry("280x200")
        self.grab_set()
        self.transient(master)
        self.resizable(False, False)
        self.inicio()

    def inicio(self):

        self.contenedor = tk.Frame(self)
        self.contenedor.pack(fill="both", expand=True)

        self.radio_label = tk.Label(self.contenedor, text="Radio (cms):")
        self.radio_label.place(x=20, y=20, width=135, height=23)
        self.campo_radio = tk.Entry(self.contenedor)
        self.campo_radio.place(x=100, y=20, width=135, height=23)

        self.calcular_button = tk.Button(self.contenedor, text="Calcular", command=self.calcular_propiedades)
        self.calcular_button.place(x=100, y=50, width=135, height=23)

        self.volumen_label = tk.Label(self.contenedor, text="Volumen (cm3):")
        self.volumen_label.place(x=20, y=90, width=135, height=23)

        self.superficie_label = tk.Label(self.contenedor, text="Superficie (cm2):")
        self.superficie_label.place(x=20, y=120, width=135, height=23)

    def calcular_propiedades(self):

        error = False
        try:
            radio = float(self.campo_radio.get())
            esfera = Esfera(radio)

            self.volumen_label.config(text=f"Volumen (cm3): {esfera.calcular_volumen():.2f}")
            self.superficie_label.config(text=f"Superficie (cm2): {esfera.calcular_superficie():.2f}")

        except ValueError:
            error = True

        finally:
            if error:
                messagebox.showerror("Error", "Campo nulo o error en formato de número")

## Clase: VentanaPiramide
class VentanaPiramide(tk.Toplevel):

    def __init__(self, master=None):

        super().__init__(master)
        self.title("Pirámide")
        self.geometry("280x240")
        self.grab_set()
        self.transient(master)
        self.resizable(False, False)
        self.inicio()

    def inicio(self):

        self.contenedor = tk.Frame(self)
        self.contenedor.pack(fill="both", expand=True)

        self.base_label = tk.Label(self.contenedor, text="Base (cms):")
        self.base_label.place(x=20, y=20, width=135, height=23)
        self.campo_base = tk.Entry(self.contenedor)
        self.campo_base.place(x=120, y=20, width=135, height=23)

        self.altura_label = tk.Label(self.contenedor, text="Altura (cms):")
        self.altura_label.place(x=20, y=50, width=135, height=23)
        self.campo_altura = tk.Entry(self.contenedor)
        self.campo_altura.place(x=120, y=50, width=135, height=23)

        self.apotema_label = tk.Label(self.contenedor, text="Apotema (cms):")
        self.apotema_label.place(x=20, y=80, width=135, height=23)
        self.campo_apotema = tk.Entry(self.contenedor)
        self.campo_apotema.place(x=120, y=80, width=135, height=23)

        self.calcular_button = tk.Button(self.contenedor, text="Calcular", command=self.calcular_propiedades)
        self.calcular_button.place(x=120, y=110, width=135, height=23)

        self.volumen_label = tk.Label(self.contenedor, text="Volumen (cm3):")
        self.volumen_label.place(x=20, y=140, width=135, height=23)

        self.superficie_label = tk.Label(self.contenedor, text="Superficie (cm2):")
        self.superficie_label.place(x=20, y=170, width=135, height=23)

    def calcular_propiedades(self):

        error = False
        try:
            base = float(self.campo_base.get())
            altura = float(self.campo_altura.get())
            apotema = float(self.campo_apotema.get())

            piramide = Piramide(base, altura, apotema)

            self.volumen_label.config(text=f"Volumen (cm3): {piramide.calcular_volumen():.2f}")
            self.superficie_label.config(text=f"Superficie (cm2): {piramide.calcular_superficie():.2f}")

        except ValueError:
            error = True

        finally:
            if error:
                messagebox.showerror("Error", "Campo nulo o error en formato de número")

## Clase: VentanaPrincipal
class VentanaPrincipal(tk.Tk):

    def __init__(self):

        super().__init__()
        self.title("Figuras")
        self.geometry("350x160")
        self.resizable(False, False)
        # La ventana se posiciona en el centro de la pantalla
        self.eval('tk::PlaceWindow %s center' % self.winfo_toplevel())
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.inicio()

    def inicio(self):

        self.contenedor = tk.Frame(self)
        self.contenedor.pack(fill="both", expand=True)

        self.cilindro_button = tk.Button(self.contenedor, text="Cilindro", command=self.abrir_cilindro)
        self.cilindro_button.place(x=20, y=50, width=80, height=23)

        self.esfera_button = tk.Button(self.contenedor, text="Esfera", command=self.abrir_esfera)
        self.esfera_button.place(x=125, y=50, width=80, height=23)

        self.piramide_button = tk.Button(self.contenedor, text="Pirámide", command=self.abrir_piramide)
        self.piramide_button.place(x=225, y=50, width=100, height=23)

    def abrir_esfera(self):

        VentanaEsfera(self)

    def abrir_cilindro(self):

        VentanaCilindro(self)

    def abrir_piramide(self):

        VentanaPiramide(self)

    def on_closing(self):

        self.destroy()

## Punto de entrada principal
if __name__ == "__main__":

    mi_ventana_principal = VentanaPrincipal()
    mi_ventana_principal.mainloop()